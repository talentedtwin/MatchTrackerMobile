generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                 String    @id
  email              String    @unique
  name               String?
  pushToken          String?
  isPremium          Boolean   @default(false)
  gdprConsentDate    DateTime?
  consentWithdrawn   Boolean   @default(false)
  dataRetentionUntil DateTime?
  lastLoginAt        DateTime?
  isDeleted          Boolean   @default(false)
  deletedAt          DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  matches            Match[]
  players            Player[]
  teams              Team[]

  @@index([isDeleted])
  @@map("users")
}

model Team {
  id        String    @id @default(cuid())
  name      String
  isDeleted Boolean   @default(false)
  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    String
  matches   Match[]
  players   Player[]
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, isDeleted])
  @@map("teams")
}

model Player {
  id         String            @id @default(cuid())
  name       String
  goals      Int               @default(0)
  assists    Int               @default(0)
  isDeleted  Boolean           @default(false)
  deletedAt  DateTime?
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
  userId     String
  teamId     String?
  matchStats PlayerMatchStat[]
  team       Team?             @relation(fields: [teamId], references: [id])
  user       User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, isDeleted])
  @@index([teamId])
  @@map("players")
}

model Match {
  id                String            @id @default(cuid())
  opponent          String
  date              DateTime
  goalsFor          Int               @default(0)
  goalsAgainst      Int               @default(0)
  isFinished        Boolean           @default(false)
  matchType         String            @default("league")
  notes             String?
  selectedPlayerIds String[]          @default([])
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  userId            String
  teamId            String?
  venue             String            @default("home")
  team              Team?             @relation(fields: [teamId], references: [id])
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  playerStats       PlayerMatchStat[]

  @@index([userId, isFinished])
  @@index([date])
  @@map("matches")
}

model PlayerMatchStat {
  id       String @id @default(cuid())
  goals    Int    @default(0)
  assists  Int    @default(0)
  playerId String
  matchId  String
  match    Match  @relation(fields: [matchId], references: [id], onDelete: Cascade)
  player   Player @relation(fields: [playerId], references: [id], onDelete: Cascade)

  @@unique([playerId, matchId])
  @@index([playerId])
  @@index([matchId])
  @@map("player_match_stats")
}
